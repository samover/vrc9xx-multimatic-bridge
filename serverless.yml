service: vrc9xx-multimatic-bridge

app: nodejs-multimatic
org: samover

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  runtime: nodejs12.x
  environment:
    LOG_LEVEL: debug
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: !GetAtt MultimaticConnectTable.Arn

plugins:
  - serverless-webpack
  - serverless-s3-sync

package:
  individually: true

  custom: ${file(./serverless.${self:provider.stage}.config.yml)}

functions:
  alexaSkillFn:
    handler: functions/alexaSkillFn/index.handler
    name: alexaSkillFn-${self:provider.stage}
    events:
      - alexaSmartHome: ${self:custom.alexaSkillIdentifier}
    environment:
      MULTIMATIC_API_PATH: https://${self:custom.apiDomain}
  authorizerFn:
    handler: functions/cognitoAuthorizerFn.handler
    name: authorizerFn-${self:provider.stage}
    environment:
      ISSUER: https://${self:custom..oauth0Url}/
  connectFn:
    handler: functions/connectFn.handler
    name: connectFn-${self:provider.stage}
    environment:
      WEB_APP_URI: ${self:custom.siteName}
      OAUTH0_URI: ${self:custom.oauth0Url}
      ONETIME_TOKEN_SECRET: ${self:custom.onetimeTokenSecret}
      CRYPTO_KEY: ${self:custom.cryptoKey}
      MULTIMATIC_TABLE: ${self:custom.multimaticTableName}
      ALLOWED_ORIGINS: https://${self:custom.siteName}
    events:
      - http:
          path: connect
          method: post
          cors: true
  multimaticFn:
    handler: functions/multimaticFn.handler
    name: multimaticFn-${self:provider.stage}
    environment:
      WEB_APP_URI: ${self:custom.siteName}
      OAUTH0_URI: ${self:custom.oauth0Url}
      ONETIME_TOKEN_SECRET: ${self:custom.onetimeTokenSecret}
      CRYPTO_KEY: ${self:custom.cryptoKey}
      MULTIMATIC_TABLE: ${self:custom.multimaticTableName}
    events:
      - http:
          path: systems
          method: get
          authorizer: authorizerFn
          cors: true
      - http:
          path: rooms
          method: get
          authorizer: authorizerFn
          cors: true
      - http:
          path: zones
          method: get
          authorizer: authorizerFn
          cors: true
      - http: # fetch room details
          path: facilities/{facilityId}/rooms/{roomId}
          method: get
          authorizer: authorizerFn
          cors: true
      - http: # fetch system details
          path: facilities/{facilityId}/system
          method: get
          authorizer: authorizerFn
          cors: true
      - http: # fetch room details
          path: facilities/{facilityId}/zones/{zoneId}
          method: get
          authorizer: authorizerFn
          cors: true
      - http:
          path: facilities/{facilityId}/rooms/{roomId}/temperature
          method: put
          authorizer: authorizerFn
          cors: true
      - http:
          path: facilities/{facilityId}/rooms/{roomId}/temperature
          method: delete
          authorizer: authorizerFn
          cors: true

resources:
  Resources:
    MultimaticConnectS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    MultimaticConnectS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: MultimaticConnectS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt MultimaticConnectCloudFrontIdentity.S3CanonicalUserId
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    MultimaticConnectCloudFrontIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Restrict MulticmaticConnect S3 access
    MultimaticConnectCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              Id: MultimaticConnect
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - '/'
                    - - origin-access-identity
                      - cloudfront
                      - Ref: MultimaticConnectCloudFrontIdentity
          Enabled: 'true'
          Aliases:
            - ${self:custom.siteName}
          DefaultRootObject: error.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /error.html
          DefaultCacheBehavior:
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: MultimaticConnect
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.1_2016
    MultimaticConnectTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.multimaticTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    MultimaticConnectCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ MultimaticConnectCloudFrontDistribution, DomainName ]
